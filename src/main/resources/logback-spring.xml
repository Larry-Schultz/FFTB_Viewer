<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<!-- use Spring default values -->
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
	<property name="LOGS" value="./logs" />

	<appender name="Console"
		class="ch.qos.logback.core.ConsoleAppender">
		<layout class="ch.qos.logback.classic.PatternLayout">
			<Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
		</layout>
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
	    	<evaluator>
	        	<expression>org.springframework.web.util.NestedServletException.class.isInstance(throwable)</expression>
	    	</evaluator>
    		<onMatch>DENY</onMatch>
		</filter>
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
	    	<evaluator>
	        	<expression>java.lang.IllegalStateException.class.isInstance(throwable)</expression>
	    	</evaluator>
    		<onMatch>DENY</onMatch>
		</filter>
	</appender>

	<appender name="EventLogsRollingFile"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOGS}/events.log</file>
		<encoder
			class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
		</encoder>
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
	    	<evaluator>
	        	<expression>org.springframework.web.util.NestedServletException.class.isInstance(throwable)</expression>
	    	</evaluator>
    		<onMatch>DENY</onMatch>
		</filter>
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
	    	<evaluator>
	        	<expression>java.lang.IllegalStateException.class.isInstance(throwable)</expression>
	    	</evaluator>
    		<onMatch>DENY</onMatch>
		</filter>
		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- rollover daily and when the file reaches 10 MegaBytes -->
			<fileNamePattern>${LOGS}/archived/events.log-%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
	</appender>
	
	<appender name="AccessLogsRollingFile"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOGS}/accessLog.log</file>
		<encoder
			class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
		</encoder>

		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- rollover daily and when the file reaches 10 MegaBytes -->
			<fileNamePattern>${LOGS}/archived/accessLog.log-%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>10MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
	</appender>
	
	<appender name="BotlandLogsRollingFile"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOGS}/botlandLog.log</file>
		<encoder
			class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
		</encoder>

		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- rollover daily and when the file reaches 10 MegaBytes -->
			<fileNamePattern>${LOGS}/archived/botlandLog.log-%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>10MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
	</appender>
	
	<appender name="AscensionPrestigeLogRollingFile"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOGS}/ascensionPrestigeLog.log</file>
		<encoder
			class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
		</encoder>

		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- rollover daily and when the file reaches 10 MegaBytes -->
			<fileNamePattern>${LOGS}/archived/ascensionPrestigeLog.log-%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>10MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
	</appender>
	
	<appender name="BatchUpdateLogRollingFile"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOGS}/batchUpdate.log</file>
		<encoder
			class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
		</encoder>

		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- rollover daily and when the file reaches 10 MegaBytes -->
			<fileNamePattern>${LOGS}/archived/batchUpdate.log-%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>10MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
	</appender>
	
	<appender name="DataUpdateLogRollingFile"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOGS}/dataUpdate.log</file>
		<encoder
			class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
		</encoder>

		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- rollover daily and when the file reaches 10 MegaBytes -->
			<fileNamePattern>${LOGS}/archived/dataUpdate.log-%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>10MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
	</appender>
	
	<appender name="GeneralRollingFile"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOGS}/general.log</file>
		<encoder
			class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
		</encoder>
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
	    	<evaluator>
	        <expression>org.springframework.web.util.NestedServletException.class.isInstance(throwable)</expression>
	    	</evaluator>
    		<onMatch>DENY</onMatch>
		</filter>
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
	    	<evaluator>
	        	<expression>java.lang.IllegalStateException.class.isInstance(throwable)</expression>
	    	</evaluator>
    		<onMatch>DENY</onMatch>
		</filter>
		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- rollover daily and when the file reaches 10 MegaBytes -->
			<fileNamePattern>${LOGS}/archived/general.log-%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>10MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
	</appender>

	<!-- LOG everything at INFO level -->
	<root level="INFO">
		<appender-ref ref="Console" />
		<appender-ref ref="GeneralRollingFile" />
	</root>
	<logger name="accessLog" level="INFO" additivity="false">
		<appender-ref ref="AccessLogsRollingFile" />
		<appender-ref ref="Console" />
	</logger>
	<logger name="fft_battleground.botland" level="INFO" additivity="false">
		<appender-ref ref="BotlandLogsRollingFile" />
		<appender-ref ref="Console" />
	</logger>
	
	<logger name="fft_battleground.event" level="INFO" additivity="false">
		<appender-ref ref="EventLogsRollingFile" />
		<appender-ref ref="Console" />
	</logger>
	
	<logger name="fft_battleground.dump.scheduled.task" level="INFO" additivity="false">
		<appender-ref ref="BatchUpdateLogRollingFile" />
		<appender-ref ref="Console" />
	</logger>
	
	<logger name="AscensionPrestigeLogger" level="DEBUG" additivity="false">
		<appender-ref ref="AscensionPrestigeLogRollingFile" />
		<appender-ref ref="Console" />
	</logger>
	<logger name="dataUpdate" level="DEBUG" additivity="false">
		<appender-ref ref="DataUpdateLogRollingFile" />
		<appender-ref ref="Console" />
	</logger>

</configuration>